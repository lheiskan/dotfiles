snippet main
	pub fn main() !void {
	    $0
	}
snippet for
	for ($1) |$2| {
	    $0
	}
snippet print
	std.debug.print("$1", .{$2});
snippet while
	var ${1:i}: ${2:usize} = ${3:0};
	while ($1 < $4) : (${4:$1 += 1}) {
	    $0
	}
snippet struct
	const ${1:$VISUAL} = struct {
	    $0
	};
snippet test
	test "$1" {
	    $0
	}
snippet expect
	try std.testing.expect($1, $2);
snippet import
	const $1 = @import("${2:$1}");
	$0
snippet std
	const std = @import("std");
	$0
snippet cu
	catch unreachable;
snippet arena
	var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
	defer arena.deinit();

	var allocator = arena.allocator();
snippet gpa
	var gpa = std.heap.GeneralPurposeAllocator(.{}){};
	defer if (gpa.deinit()) std.debug.print("Memory leak detected\n", .{});

	var allocator = gpa.allocator();
snippet arraylist
	var $1 = std.ArrayList($2).init(allocator);
	defer $1.deinit();
snippet ahash
	var $1 = std.AutoHashMap($2, $3).init(allocator);
	defer $1.deinit();
snippet shash
	var $1 = std.StringHashMap($2).init(allocator);
	defer $1.deinit();
snippet mmap
	var $1 = try std.os.mmap(null, try file.getEndPos(), std.os.PROT.READ, std.os.MAP.SHARED, file.handle, 0);
	defer std.os.munmap($1);
snippet openfile
	var $1 = try std.fs.cwd().openFile($2, .{});
	defer $1.close();
